package jtt

import "fmt"

// T808_0x8105 终端控制
//
//	命令字(BYTE)：
//	  - 0x01：无线升级，命令参数之间采用半角分号分隔。指令如下:"URL地址;拨号点名称;
//	    拨号用户名;拨号密码;地址;TCP端口;UDP端口;制造商ID;硬件版本;固件版本;
//	    连接到指定服务器时限",若某个参数无值,则放空。参数项见命令参数格式。（2011版本、2013版本）
//	  - 0x02：控制终端连接指定服务器，命令参数之间采用半角分号分隔；指令如下:"连接控制;
//	    监管平台鉴权码;拨号点名称;拨号用户名;拨号密码;地址;TCP端口;UDP端口;
//	    连接到指定服务器时限",若某个参数无值则放空；当连接控制为1时无后继参数。
//	    参数项见命令参数格式。（2011版本、2013版本、2019版本）
//	  - 0x03：终端关机。（2011版本、2013版本）
//	  - 0x04：终端复位，无命令参数。（2011版本、2013版本、2019版本）
//	  - 0x05：终端恢复出厂设置，无命令参数。（2011版本、2013版本、2019版本）
//	  - 0x06：关闭数据通信。（2011版本、2013版本）
//	  - 0x07：关闭所有无线通信。（2011版本、2013版本）
//
//	命令参数格式（以半角分号“;”分隔，各字段按 GB18030 编码拼接）：
//	 1. 连接控制 BYTE
//	    0：切换到指定监管平台服务器（进入应急状态，仅处理来自该服务器的控制指令）
//	    1：切换回原缺省监控平台服务器，恢复正常状态（无后继参数）
//	 2. 拨号点名称 STRING
//	    一般为服务器 APN；若网络制式为 CDMA，则为 PPP 连接拨号号码
//	 3. 拨号用户名 STRING
//	    服务器无线通信拨号用户名
//	 4. 拨号密码 STRING
//	    服务器无线通信拨号密码
//	 5. 地址 STRING
//	    服务器地址，IP 或域名
//	 6. TCP 端口 WORD
//	    服务器 TCP 端口
//	 7. UDP 端口 WORD
//	    服务器 UDP 端口
//	 8. 制造商 ID BYTE[5]
//	    终端制造商编码
//	 9. 监管平台鉴权码 STRING
//	    监管平台下发的鉴权码，仅用于终端连接到监管平台之后的鉴权；终端接回原监控平台时仍用原鉴权码
//	 10. 硬件版本 STRING
//	    终端的硬件版本号，由制造商自定
//	 11. 固件版本 STRING
//	    终端的固件版本号，由制造商自定
//	 12. URL 地址 STRING
//	    完整 URL 地址（用于无线升级场景）
//	 13. 连接到指定服务器时限 WORD
//	    单位：min。非 0 表示在终端接收到升级或连接指定服务器指令后的有效期截止前，终端应连回原地址；
//	    为 0 表示一直连接指定服务器
//
// 终端根据命令执行结果按协议规定进行响应（若有）。
type T808_0x8105 struct {
	// 命令字
	//
	//	0x01：无线升级，命令参数之间采用半角分号分隔。（2011版本、2013版本）
	//	0x02：控制终端连接指定服务器，命令参数之间采用半角分号分隔。（2011版本、2013版本、2019版本）
	//	0x03：终端关机（2011版本、2013版本）
	//	0x04：终端复位，无命令参数。（2011版本、2013版本、2019版本）
	//	0x05：终端恢复出厂设置，无命令参数。（2011版本、2013版本、2019版本）
	//	0x06：关闭数据通信。（2011版本、2013版本）
	//	0x07：关闭所有无线通信。（2011版本、2013版本）
	Command byte
	// 命令参数（每个字段之间采用半角“;”分隔,每个STRING字段先按GBK编码处理后再组成消息）
	Param string
}

func (m *T808_0x8105) MsgID() MsgID { return MsgT808_0x8105 }

func (m *T808_0x8105) Encode() ([]byte, error) {
	w := NewWriter()
	// 命令字
	w.WriteByte(m.Command)
	// 命令参数（若为空则写入0长度字符串，即不写额外字节）
	if len(m.Param) > 0 {
		if err := w.WriteString(m.Param); err != nil {
			return nil, fmt.Errorf("write param: %w", err)
		}
	}
	return w.Bytes(), nil
}

func (m *T808_0x8105) Decode(data []byte) (int, error) {
	if len(data) < 1 {
		return 0, ErrInvalidBody
	}
	r := NewReader(data)
	cmd, err := r.ReadByte()
	if err != nil {
		return 0, fmt.Errorf("read command: %w", err)
	}
	m.Command = cmd
	// 剩余部分为命令参数（STRING, GBK），可能为空
	param, err := r.ReadString()
	if err != nil {
		return 0, fmt.Errorf("read param: %w", err)
	}
	m.Param = param
	return len(data) - r.Len(), nil
}
